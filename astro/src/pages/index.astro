---
import Layout from "../layouts/Layout.astro";
import UpcomingShows from "../components/UpcomingShows.astro";
import BandInfo from "../components/BandInfo.astro";
import { RandomSnacksVid } from "../components/RandomSnacksVid";
import { sanityAPI, sanityImageUrl } from "../utils/sanity";
import type { SnacksVid, BannerImage } from "../types";

const bannerResult = await sanityAPI("banner");
const banners = bannerResult.result
const banner = banners[0] as BannerImage

const vidResult = await sanityAPI("videos");
const snacksVids = vidResult.result as SnacksVid[];

const builder = sanityImageUrl(banner.image)
---

<Layout title="Nasty Snacks">
  <main class="flex flex-col gap-20">
    <div
      class="md:h-[100vh] -z-40 overflow-hidden md:opacity-20 opacity-40 -translate-y-[64px]"
    >
      <img
        alt={banner.alt}
        src={builder.auto('format').url()}
        height='1000px'
        width='1500px'
      />
    </div>

    <!-- Upcoming Shows -->
    <section id="shows" class="text-center">
      <UpcomingShows />
    </section>

    <section id="video" class="opacity-0 transition duration-700 ease-in-out">
      <RandomSnacksVid snacksVids={snacksVids} client:visible />
    </section>

    <!-- Band info -->
    <section id="band" class="text-center">
      <BandInfo />
    </section>

    <!-- Go to top -->
    <button name="goToTop" id="toTop">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        fill="currentColor"
        class="w-12 h-12 fixed bottom-8 right-8"
      >
        <path
          fill-rule="evenodd"
          d="M11.47 7.72a.75.75 0 011.06 0l7.5 7.5a.75.75 0 11-1.06 1.06L12 9.31l-6.97 6.97a.75.75 0 01-1.06-1.06l7.5-7.5z"
          clip-rule="evenodd"></path>
      </svg>
    </button>
  </main>
</Layout>
<script>
  const showVideo = () => {
    const video = document.getElementById("video");
    const options = {
      threshold: 0.1,
      rootMargin: "-190px",
    };
    if (!video) return;
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("opacity-100");
        } else {
          entry.target.classList.remove("opacity-100");
        }
      });
    }, options);
    observer.observe(video);
  };

  const toTop = () => {
    const top = document.getElementById("toTop");
    if (!top) return;
    top.addEventListener(
      "click",
      () => {
        window.scrollTo(0, 0);
      },
      { passive: true }
    );
  };
  toTop();
  showVideo();
</script>
