---
import type { Show } from "../types"
import { dateFormatter, isUpcoming, showSortByDate } from "../utils/helpers"
import { sanityAPI } from "../utils/sanity"

const result = await sanityAPI("shows")
const allShows = result.result as Show[]
const shows = allShows.filter(isUpcoming).sort(showSortByDate)
---

<h1
  id="showListHeader"
  class="-z-10 -translate-y-4 pb-6 text-3xl tracking-wider opacity-0 transition duration-500 ease-in-out"
>
  UPCOMING SHOWS
</h1>
<ul
  class="-z-10 mx-auto flex w-fit flex-col gap-2 pl-2 text-left tracking-wider opacity-0 transition duration-500 ease-in-out"
  id="showList"
>
  {
    shows?.map((show) => {
      return (
        <li>
          <em>
            <strong>
              {show.venueName.toUpperCase()}
              {show.city && show.state
                ? `- ${show.city.toUpperCase()}, ${show.state.toUpperCase()}`
                : ""}
            </strong>
            {show.subtitle?.toUpperCase() ?? ""}{" "}
            {show.description ? `// ${show.description.toUpperCase()}` : ""}
            {show.date ? `// ${dateFormatter(show.date)}` : ""}
            <strong>
              {show.ticketLink ? (
                <a
                  href={show.ticketLink}
                  target="_blank"
                  rel="noreferrer noopener"
                >
                  {" "}
                  &gt;&gt; <span class="text-gradient">TICKETS</span>
                </a>
              ) : (
                ""
              )}
            </strong>
          </em>
        </li>
      )
    })
  }
</ul>
<script>
  function fadeInShows() {
    const options = {
      threshold: 0.2,
      rootMargin: "-40px",
    }

    const shows = document.getElementById("showList")
    const header = document.getElementById("showListHeader")
    if (!shows || !header) return

    const observer = new IntersectionObserver((entries) => {
      const showShows = (shows: HTMLElement) => {
        shows.classList.add("opacity-100")
        shows.classList.remove("-translate-x-6")
      }
      const showHeader = (header: HTMLElement) => {
        header.classList.add("opacity-100")
        header.classList.remove("-translate-y-4")
      }
      const hideShows = (shows: HTMLElement) => {
        shows.classList.remove("opacity-100")
        shows.classList.add("-translate-x-6")
      }
      const hideHeader = (header: HTMLElement) => {
        header.classList.remove("opacity-100")
        header.classList.add("-translate-y-4")
      }

      const show = () => {
        showShows(shows)
        showHeader(header)
      }
      const hide = () => {
        hideShows(shows)
        hideHeader(header)
      }
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          show()
        } else {
          hide()
        }
      })
    }, options)

    observer.observe(shows)
  }

  fadeInShows()
</script>
