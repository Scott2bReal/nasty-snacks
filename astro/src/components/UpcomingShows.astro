---
import type { Show } from "../types";
import { dateFormatter, isUpcoming } from "../utils/helpers";
import { sanityAPI } from "../utils/sanity";

const result = await sanityAPI("shows");
const allShows = result.result as Show[];
const shows = allShows.filter(isUpcoming);
---

<h3 id="showListHeader" class="tracking-wider text-3xl pb-6 opacity-0 -translate-y-4 transition duration-500 ease-in-out -z-10">UPCOMING SHOWS</h3>
<ul
  class="mx-auto tracking-wider w-fit flex flex-col gap-2 text-left pl-2 opacity-0 transition duration-500 ease-in-out -z-10"
  id="showList"
>
  {
    shows?.map((show) => {
      return (
        <li>
          <em>
            <strong>
              {show.venueName.toUpperCase()}
              {show.city && show.state
                ? `- ${show.city.toUpperCase()}, ${show.state.toUpperCase()}`
                : ""}
            </strong>
            {show.subtitle?.toUpperCase() ?? ""}{" "}
            {show.description ? `// ${show.description.toUpperCase()}` : ""}
            {show.date ? `// ${dateFormatter(show.date)}` : ""}
            <strong>
              {show.ticketLink ? (
                <a href={show.ticketLink} target="_blank">
                  {" "}
                  &gt;&gt; TICKETS
                </a>
              ) : (
                ""
              )}
            </strong>
          </em>
        </li>
      );
    })
  }
</ul>
<script>
  function fadeInShows() {
    const options = {
      threshold: 0.1,
      rootMargin: "-150px",
    };

    const shows = document.getElementById("showList");
    const header = document.getElementById("showListHeader");
    if (!shows || !header) return;

    const observer = new IntersectionObserver((entries) => {
      const showShows = (shows: HTMLElement) => {
        shows.classList.add("opacity-100");
        shows.classList.remove("-translate-x-6");
      };
      const showHeader = (header: HTMLElement) => {
        header.classList.add("opacity-100");
        header.classList.remove("-translate-y-4");
      };
      const hideShows = (shows: HTMLElement) => {
        shows.classList.remove("opacity-100");
        shows.classList.add("-translate-x-6");
      };
      const hideHeader = (header: HTMLElement) => {
        header.classList.remove("opacity-100");
        header.classList.add("-translate-y-4");
      };

      const show = () => {
        showShows(shows)
        showHeader(header)
      }
      const hide = () => {
        hideShows(shows)
        hideHeader(header)
      }
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          show()
        } else {
          hide()
        }
      });
    }, options);

    observer.observe(shows);
  }

  fadeInShows();
</script>
