---
import type { Show } from "../types";
import { dateFormatter, isUpcoming } from "../utils/helpers";
import { sanityAPI } from "../utils/sanity";

const result = await sanityAPI("shows");
const allShows = result.result as Show[];
const shows = allShows.filter(isUpcoming)
---

<h3 class="tracking-wider text-3xl pb-6">Upcoming Shows</h3>
<ul
  class="mx-auto tracking-wider w-fit flex flex-col gap-2 text-left pl-2 opacity-0 transition duration-500 ease-in -z-10"
  id="showList"
>
  {
    shows?.map((show) => {
      return (
        <li>
          <em>
            <strong>
              {show.venueName.toUpperCase()}
              {show.city && show.state
                ? `- ${show.city.toUpperCase()}, ${show.state.toUpperCase()}`
                : ""}
            </strong>
            {show.subtitle?.toUpperCase() ?? ""}{" "}
            {show.description ? `// ${show.description.toUpperCase()}` : ""}
            {show.date ? `// ${dateFormatter(show.date)}` : ""}
            <strong>
              {show.ticketLink ? (
                <a href={show.ticketLink} target="_blank">
                  {" "}
                  &gt;&gt; TICKETS
                </a>
              ) : (
                ""
              )}
            </strong>
          </em>
        </li>
      );
    })
  }
</ul>
<script>
  function fadeInShows() {
    const options = {
      threshold: 0.10,
      rootMargin: "-150px",
    };

    const shows = document.getElementById("showList");
    if (!shows) return;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('opacity-100')
          entry.target.classList.remove('-translate-x-6')
        } else {
          entry.target.classList.remove('opacity-100')
          entry.target.classList.add('-translate-x-6')
        }
      })
    }, options)

    observer.observe(shows)
  }

  fadeInShows();
</script>
